/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTaxArgs } from "./CreateTaxArgs";
import { UpdateTaxArgs } from "./UpdateTaxArgs";
import { DeleteTaxArgs } from "./DeleteTaxArgs";
import { TaxFindManyArgs } from "./TaxFindManyArgs";
import { TaxFindUniqueArgs } from "./TaxFindUniqueArgs";
import { Tax } from "./Tax";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { TaxService } from "../tax.service";

@graphql.Resolver(() => Tax)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class TaxResolverBase {
  constructor(
    protected readonly service: TaxService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Tax",
    action: "read",
    possession: "any",
  })
  async _taxesMeta(
    @graphql.Args() args: TaxFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Tax])
  @nestAccessControl.UseRoles({
    resource: "Tax",
    action: "read",
    possession: "any",
  })
  async taxes(@graphql.Args() args: TaxFindManyArgs): Promise<Tax[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Tax, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Tax",
    action: "read",
    possession: "own",
  })
  async tax(@graphql.Args() args: TaxFindUniqueArgs): Promise<Tax | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tax)
  @nestAccessControl.UseRoles({
    resource: "Tax",
    action: "create",
    possession: "any",
  })
  async createTax(@graphql.Args() args: CreateTaxArgs): Promise<Tax> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tax)
  @nestAccessControl.UseRoles({
    resource: "Tax",
    action: "update",
    possession: "any",
  })
  async updateTax(@graphql.Args() args: UpdateTaxArgs): Promise<Tax | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tax)
  @nestAccessControl.UseRoles({
    resource: "Tax",
    action: "delete",
    possession: "any",
  })
  async deleteTax(@graphql.Args() args: DeleteTaxArgs): Promise<Tax | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Payment])
  @nestAccessControl.UseRoles({
    resource: "Payment",
    action: "read",
    possession: "any",
  })
  async payments(
    @graphql.Parent() parent: Tax,
    @graphql.Args() args: PaymentFindManyArgs
  ): Promise<Payment[]> {
    const results = await this.service.findPayments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
