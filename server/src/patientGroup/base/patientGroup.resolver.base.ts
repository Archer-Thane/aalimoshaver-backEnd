/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePatientGroupArgs } from "./CreatePatientGroupArgs";
import { UpdatePatientGroupArgs } from "./UpdatePatientGroupArgs";
import { DeletePatientGroupArgs } from "./DeletePatientGroupArgs";
import { PatientGroupFindManyArgs } from "./PatientGroupFindManyArgs";
import { PatientGroupFindUniqueArgs } from "./PatientGroupFindUniqueArgs";
import { PatientGroup } from "./PatientGroup";
import { Patient } from "../../patient/base/Patient";
import { PatientGroupService } from "../patientGroup.service";

@graphql.Resolver(() => PatientGroup)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PatientGroupResolverBase {
  constructor(
    protected readonly service: PatientGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PatientGroup",
    action: "read",
    possession: "any",
  })
  async _patientGroupsMeta(
    @graphql.Args() args: PatientGroupFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PatientGroup])
  @nestAccessControl.UseRoles({
    resource: "PatientGroup",
    action: "read",
    possession: "any",
  })
  async patientGroups(
    @graphql.Args() args: PatientGroupFindManyArgs
  ): Promise<PatientGroup[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PatientGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PatientGroup",
    action: "read",
    possession: "own",
  })
  async patientGroup(
    @graphql.Args() args: PatientGroupFindUniqueArgs
  ): Promise<PatientGroup | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PatientGroup)
  @nestAccessControl.UseRoles({
    resource: "PatientGroup",
    action: "create",
    possession: "any",
  })
  async createPatientGroup(
    @graphql.Args() args: CreatePatientGroupArgs
  ): Promise<PatientGroup> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        patientId: args.data.patientId
          ? {
              connect: args.data.patientId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PatientGroup)
  @nestAccessControl.UseRoles({
    resource: "PatientGroup",
    action: "update",
    possession: "any",
  })
  async updatePatientGroup(
    @graphql.Args() args: UpdatePatientGroupArgs
  ): Promise<PatientGroup | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          patientId: args.data.patientId
            ? {
                connect: args.data.patientId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PatientGroup)
  @nestAccessControl.UseRoles({
    resource: "PatientGroup",
    action: "delete",
    possession: "any",
  })
  async deletePatientGroup(
    @graphql.Args() args: DeletePatientGroupArgs
  ): Promise<PatientGroup | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Patient, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "read",
    possession: "any",
  })
  async patientId(
    @graphql.Parent() parent: PatientGroup
  ): Promise<Patient | null> {
    const result = await this.service.getPatientId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
