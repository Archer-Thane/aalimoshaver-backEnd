/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePsychotherapistArgs } from "./CreatePsychotherapistArgs";
import { UpdatePsychotherapistArgs } from "./UpdatePsychotherapistArgs";
import { DeletePsychotherapistArgs } from "./DeletePsychotherapistArgs";
import { PsychotherapistFindManyArgs } from "./PsychotherapistFindManyArgs";
import { PsychotherapistFindUniqueArgs } from "./PsychotherapistFindUniqueArgs";
import { Psychotherapist } from "./Psychotherapist";
import { PsychotherapistService } from "../psychotherapist.service";

@graphql.Resolver(() => Psychotherapist)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PsychotherapistResolverBase {
  constructor(
    protected readonly service: PsychotherapistService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Psychotherapist",
    action: "read",
    possession: "any",
  })
  async _psychotherapistsMeta(
    @graphql.Args() args: PsychotherapistFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Psychotherapist])
  @nestAccessControl.UseRoles({
    resource: "Psychotherapist",
    action: "read",
    possession: "any",
  })
  async psychotherapists(
    @graphql.Args() args: PsychotherapistFindManyArgs
  ): Promise<Psychotherapist[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Psychotherapist, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Psychotherapist",
    action: "read",
    possession: "own",
  })
  async psychotherapist(
    @graphql.Args() args: PsychotherapistFindUniqueArgs
  ): Promise<Psychotherapist | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Psychotherapist)
  @nestAccessControl.UseRoles({
    resource: "Psychotherapist",
    action: "create",
    possession: "any",
  })
  async createPsychotherapist(
    @graphql.Args() args: CreatePsychotherapistArgs
  ): Promise<Psychotherapist> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Psychotherapist)
  @nestAccessControl.UseRoles({
    resource: "Psychotherapist",
    action: "update",
    possession: "any",
  })
  async updatePsychotherapist(
    @graphql.Args() args: UpdatePsychotherapistArgs
  ): Promise<Psychotherapist | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Psychotherapist)
  @nestAccessControl.UseRoles({
    resource: "Psychotherapist",
    action: "delete",
    possession: "any",
  })
  async deletePsychotherapist(
    @graphql.Args() args: DeletePsychotherapistArgs
  ): Promise<Psychotherapist | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
