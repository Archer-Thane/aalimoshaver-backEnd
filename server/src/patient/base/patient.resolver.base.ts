/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePatientArgs } from "./CreatePatientArgs";
import { UpdatePatientArgs } from "./UpdatePatientArgs";
import { DeletePatientArgs } from "./DeletePatientArgs";
import { PatientFindManyArgs } from "./PatientFindManyArgs";
import { PatientFindUniqueArgs } from "./PatientFindUniqueArgs";
import { Patient } from "./Patient";
import { PsychotherapistFindManyArgs } from "../../psychotherapist/base/PsychotherapistFindManyArgs";
import { Psychotherapist } from "../../psychotherapist/base/Psychotherapist";
import { PatientGroupFindManyArgs } from "../../patientGroup/base/PatientGroupFindManyArgs";
import { PatientGroup } from "../../patientGroup/base/PatientGroup";
import { PatientTraitFindManyArgs } from "../../patientTrait/base/PatientTraitFindManyArgs";
import { PatientTrait } from "../../patientTrait/base/PatientTrait";
import { QuestionaireFindManyArgs } from "../../questionaire/base/QuestionaireFindManyArgs";
import { Questionaire } from "../../questionaire/base/Questionaire";
import { SessionFindManyArgs } from "../../session/base/SessionFindManyArgs";
import { Session } from "../../session/base/Session";
import { PatientService } from "../patient.service";

@graphql.Resolver(() => Patient)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PatientResolverBase {
  constructor(
    protected readonly service: PatientService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "read",
    possession: "any",
  })
  async _patientsMeta(
    @graphql.Args() args: PatientFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Patient])
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "read",
    possession: "any",
  })
  async patients(
    @graphql.Args() args: PatientFindManyArgs
  ): Promise<Patient[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Patient, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "read",
    possession: "own",
  })
  async patient(
    @graphql.Args() args: PatientFindUniqueArgs
  ): Promise<Patient | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Patient)
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "create",
    possession: "any",
  })
  async createPatient(
    @graphql.Args() args: CreatePatientArgs
  ): Promise<Patient> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Patient)
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "update",
    possession: "any",
  })
  async updatePatient(
    @graphql.Args() args: UpdatePatientArgs
  ): Promise<Patient | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Patient)
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "delete",
    possession: "any",
  })
  async deletePatient(
    @graphql.Args() args: DeletePatientArgs
  ): Promise<Patient | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Psychotherapist])
  @nestAccessControl.UseRoles({
    resource: "Psychotherapist",
    action: "read",
    possession: "any",
  })
  async currentPsychoId(
    @graphql.Parent() parent: Patient,
    @graphql.Args() args: PsychotherapistFindManyArgs
  ): Promise<Psychotherapist[]> {
    const results = await this.service.findCurrentPsychoId(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PatientGroup])
  @nestAccessControl.UseRoles({
    resource: "PatientGroup",
    action: "read",
    possession: "any",
  })
  async patientGroups(
    @graphql.Parent() parent: Patient,
    @graphql.Args() args: PatientGroupFindManyArgs
  ): Promise<PatientGroup[]> {
    const results = await this.service.findPatientGroups(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PatientTrait])
  @nestAccessControl.UseRoles({
    resource: "PatientTrait",
    action: "read",
    possession: "any",
  })
  async patientTraits(
    @graphql.Parent() parent: Patient,
    @graphql.Args() args: PatientTraitFindManyArgs
  ): Promise<PatientTrait[]> {
    const results = await this.service.findPatientTraits(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Questionaire])
  @nestAccessControl.UseRoles({
    resource: "Questionaire",
    action: "read",
    possession: "any",
  })
  async questionaires(
    @graphql.Parent() parent: Patient,
    @graphql.Args() args: QuestionaireFindManyArgs
  ): Promise<Questionaire[]> {
    const results = await this.service.findQuestionaires(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Session])
  @nestAccessControl.UseRoles({
    resource: "Session",
    action: "read",
    possession: "any",
  })
  async sessions(
    @graphql.Parent() parent: Patient,
    @graphql.Args() args: SessionFindManyArgs
  ): Promise<Session[]> {
    const results = await this.service.findSessions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
