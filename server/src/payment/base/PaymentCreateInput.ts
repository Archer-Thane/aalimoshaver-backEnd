/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsInt,
  IsOptional,
  IsString,
  IsEnum,
  ValidateNested,
} from "class-validator";
import { EnumPaymentPaymentType } from "./EnumPaymentPaymentType";
import { SessionWhereUniqueInput } from "../../session/base/SessionWhereUniqueInput";
import { Type } from "class-transformer";
import { SessionCreateNestedManyWithoutPaymentsInput } from "./SessionCreateNestedManyWithoutPaymentsInput";
import { EnumPaymentStatus } from "./EnumPaymentStatus";
import { TaxWhereUniqueInput } from "../../tax/base/TaxWhereUniqueInput";
@InputType()
class PaymentCreateInput {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  cost?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  desc?: string | null;

  @ApiProperty({
    required: false,
    enum: EnumPaymentPaymentType,
    isArray: true,
  })
  @IsEnum(EnumPaymentPaymentType, {
    each: true,
  })
  @IsOptional()
  @Field(() => [EnumPaymentPaymentType], {
    nullable: true,
  })
  paymentType?: Array<"Cash" | "Card" | "CardToCard" | "Unpaid">;

  @ApiProperty({
    required: false,
    type: () => SessionWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => SessionWhereUniqueInput)
  @IsOptional()
  @Field(() => SessionWhereUniqueInput, {
    nullable: true,
  })
  sessionId?: SessionWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => SessionCreateNestedManyWithoutPaymentsInput,
  })
  @ValidateNested()
  @Type(() => SessionCreateNestedManyWithoutPaymentsInput)
  @IsOptional()
  @Field(() => SessionCreateNestedManyWithoutPaymentsInput, {
    nullable: true,
  })
  sessions?: SessionCreateNestedManyWithoutPaymentsInput;

  @ApiProperty({
    required: false,
    enum: EnumPaymentStatus,
  })
  @IsEnum(EnumPaymentStatus)
  @IsOptional()
  @Field(() => EnumPaymentStatus, {
    nullable: true,
  })
  status?: "PaidOff" | "Unpaid" | null;

  @ApiProperty({
    required: false,
    type: () => TaxWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TaxWhereUniqueInput)
  @IsOptional()
  @Field(() => TaxWhereUniqueInput, {
    nullable: true,
  })
  taxId?: TaxWhereUniqueInput | null;
}
export { PaymentCreateInput };
