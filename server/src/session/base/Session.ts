/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsDate,
  IsOptional,
  IsString,
  IsInt,
  ValidateNested,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { Patient } from "../../patient/base/Patient";
import { Payment } from "../../payment/base/Payment";
import { EnumSessionPayStatus } from "./EnumSessionPayStatus";
import { Psychotherapist } from "../../psychotherapist/base/Psychotherapist";
import { PsychoSchedule } from "../../psychoSchedule/base/PsychoSchedule";
import { Report } from "../../report/base/Report";
import { EnumSessionSessionType } from "./EnumSessionSessionType";
import { EnumSessionStatus } from "./EnumSessionStatus";
@ObjectType()
class Session {
  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  attendTime!: Date | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  desc!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  length!: number | null;

  @ApiProperty({
    required: false,
    type: () => Patient,
  })
  @ValidateNested()
  @Type(() => Patient)
  @IsOptional()
  patientId?: Patient | null;

  @ApiProperty({
    required: false,
    type: () => Payment,
  })
  @ValidateNested()
  @Type(() => Payment)
  @IsOptional()
  payId?: Payment | null;

  @ApiProperty({
    required: false,
    type: () => [Payment],
  })
  @ValidateNested()
  @Type(() => Payment)
  @IsOptional()
  payments?: Array<Payment>;

  @ApiProperty({
    required: false,
    enum: EnumSessionPayStatus,
  })
  @IsEnum(EnumSessionPayStatus)
  @IsOptional()
  @Field(() => EnumSessionPayStatus, {
    nullable: true,
  })
  payStatus?: "UnPaid" | "FullyPaid" | "PartailPaid" | null;

  @ApiProperty({
    required: false,
    type: () => Psychotherapist,
  })
  @ValidateNested()
  @Type(() => Psychotherapist)
  @IsOptional()
  psychoId?: Psychotherapist | null;

  @ApiProperty({
    required: false,
    type: () => PsychoSchedule,
  })
  @ValidateNested()
  @Type(() => PsychoSchedule)
  @IsOptional()
  psychoScheduleId?: PsychoSchedule | null;

  @ApiProperty({
    required: false,
    type: () => Report,
  })
  @ValidateNested()
  @Type(() => Report)
  @IsOptional()
  reportId?: Report | null;

  @ApiProperty({
    required: false,
    enum: EnumSessionSessionType,
  })
  @IsEnum(EnumSessionSessionType)
  @IsOptional()
  @Field(() => EnumSessionSessionType, {
    nullable: true,
  })
  sessionType?: "Online" | "Offline" | "Mix" | null;

  @ApiProperty({
    required: false,
    enum: EnumSessionStatus,
  })
  @IsEnum(EnumSessionStatus)
  @IsOptional()
  @Field(() => EnumSessionStatus, {
    nullable: true,
  })
  status?: "Free" | "Reserved" | "FinalChecked" | "InProgress" | "Done" | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}
export { Session };
