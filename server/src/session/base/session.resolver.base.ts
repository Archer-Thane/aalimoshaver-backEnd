/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSessionArgs } from "./CreateSessionArgs";
import { UpdateSessionArgs } from "./UpdateSessionArgs";
import { DeleteSessionArgs } from "./DeleteSessionArgs";
import { SessionFindManyArgs } from "./SessionFindManyArgs";
import { SessionFindUniqueArgs } from "./SessionFindUniqueArgs";
import { Session } from "./Session";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { Patient } from "../../patient/base/Patient";
import { Psychotherapist } from "../../psychotherapist/base/Psychotherapist";
import { PsychoSchedule } from "../../psychoSchedule/base/PsychoSchedule";
import { Report } from "../../report/base/Report";
import { SessionService } from "../session.service";

@graphql.Resolver(() => Session)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class SessionResolverBase {
  constructor(
    protected readonly service: SessionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Session",
    action: "read",
    possession: "any",
  })
  async _sessionsMeta(
    @graphql.Args() args: SessionFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Session])
  @nestAccessControl.UseRoles({
    resource: "Session",
    action: "read",
    possession: "any",
  })
  async sessions(
    @graphql.Args() args: SessionFindManyArgs
  ): Promise<Session[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Session, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Session",
    action: "read",
    possession: "own",
  })
  async session(
    @graphql.Args() args: SessionFindUniqueArgs
  ): Promise<Session | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Session)
  @nestAccessControl.UseRoles({
    resource: "Session",
    action: "create",
    possession: "any",
  })
  async createSession(
    @graphql.Args() args: CreateSessionArgs
  ): Promise<Session> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        patientId: args.data.patientId
          ? {
              connect: args.data.patientId,
            }
          : undefined,

        payId: args.data.payId
          ? {
              connect: args.data.payId,
            }
          : undefined,

        psychoId: args.data.psychoId
          ? {
              connect: args.data.psychoId,
            }
          : undefined,

        psychoScheduleId: args.data.psychoScheduleId
          ? {
              connect: args.data.psychoScheduleId,
            }
          : undefined,

        reportId: args.data.reportId
          ? {
              connect: args.data.reportId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Session)
  @nestAccessControl.UseRoles({
    resource: "Session",
    action: "update",
    possession: "any",
  })
  async updateSession(
    @graphql.Args() args: UpdateSessionArgs
  ): Promise<Session | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          patientId: args.data.patientId
            ? {
                connect: args.data.patientId,
              }
            : undefined,

          payId: args.data.payId
            ? {
                connect: args.data.payId,
              }
            : undefined,

          psychoId: args.data.psychoId
            ? {
                connect: args.data.psychoId,
              }
            : undefined,

          psychoScheduleId: args.data.psychoScheduleId
            ? {
                connect: args.data.psychoScheduleId,
              }
            : undefined,

          reportId: args.data.reportId
            ? {
                connect: args.data.reportId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Session)
  @nestAccessControl.UseRoles({
    resource: "Session",
    action: "delete",
    possession: "any",
  })
  async deleteSession(
    @graphql.Args() args: DeleteSessionArgs
  ): Promise<Session | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Payment])
  @nestAccessControl.UseRoles({
    resource: "Payment",
    action: "read",
    possession: "any",
  })
  async payments(
    @graphql.Parent() parent: Session,
    @graphql.Args() args: PaymentFindManyArgs
  ): Promise<Payment[]> {
    const results = await this.service.findPayments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Patient, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "read",
    possession: "any",
  })
  async patientId(@graphql.Parent() parent: Session): Promise<Patient | null> {
    const result = await this.service.getPatientId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Payment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Payment",
    action: "read",
    possession: "any",
  })
  async payId(@graphql.Parent() parent: Session): Promise<Payment | null> {
    const result = await this.service.getPayId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Psychotherapist, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Psychotherapist",
    action: "read",
    possession: "any",
  })
  async psychoId(
    @graphql.Parent() parent: Session
  ): Promise<Psychotherapist | null> {
    const result = await this.service.getPsychoId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PsychoSchedule, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PsychoSchedule",
    action: "read",
    possession: "any",
  })
  async psychoScheduleId(
    @graphql.Parent() parent: Session
  ): Promise<PsychoSchedule | null> {
    const result = await this.service.getPsychoScheduleId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Report, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Report",
    action: "read",
    possession: "any",
  })
  async reportId(@graphql.Parent() parent: Session): Promise<Report | null> {
    const result = await this.service.getReportId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
