/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCheckoutPaymentArgs } from "./CreateCheckoutPaymentArgs";
import { UpdateCheckoutPaymentArgs } from "./UpdateCheckoutPaymentArgs";
import { DeleteCheckoutPaymentArgs } from "./DeleteCheckoutPaymentArgs";
import { CheckoutPaymentFindManyArgs } from "./CheckoutPaymentFindManyArgs";
import { CheckoutPaymentFindUniqueArgs } from "./CheckoutPaymentFindUniqueArgs";
import { CheckoutPayment } from "./CheckoutPayment";
import { Psychotherapist } from "../../psychotherapist/base/Psychotherapist";
import { CheckoutPaymentService } from "../checkoutPayment.service";

@graphql.Resolver(() => CheckoutPayment)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class CheckoutPaymentResolverBase {
  constructor(
    protected readonly service: CheckoutPaymentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CheckoutPayment",
    action: "read",
    possession: "any",
  })
  async _checkoutPaymentsMeta(
    @graphql.Args() args: CheckoutPaymentFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CheckoutPayment])
  @nestAccessControl.UseRoles({
    resource: "CheckoutPayment",
    action: "read",
    possession: "any",
  })
  async checkoutPayments(
    @graphql.Args() args: CheckoutPaymentFindManyArgs
  ): Promise<CheckoutPayment[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CheckoutPayment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CheckoutPayment",
    action: "read",
    possession: "own",
  })
  async checkoutPayment(
    @graphql.Args() args: CheckoutPaymentFindUniqueArgs
  ): Promise<CheckoutPayment | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CheckoutPayment)
  @nestAccessControl.UseRoles({
    resource: "CheckoutPayment",
    action: "create",
    possession: "any",
  })
  async createCheckoutPayment(
    @graphql.Args() args: CreateCheckoutPaymentArgs
  ): Promise<CheckoutPayment> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        psychoId: args.data.psychoId
          ? {
              connect: args.data.psychoId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CheckoutPayment)
  @nestAccessControl.UseRoles({
    resource: "CheckoutPayment",
    action: "update",
    possession: "any",
  })
  async updateCheckoutPayment(
    @graphql.Args() args: UpdateCheckoutPaymentArgs
  ): Promise<CheckoutPayment | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          psychoId: args.data.psychoId
            ? {
                connect: args.data.psychoId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CheckoutPayment)
  @nestAccessControl.UseRoles({
    resource: "CheckoutPayment",
    action: "delete",
    possession: "any",
  })
  async deleteCheckoutPayment(
    @graphql.Args() args: DeleteCheckoutPaymentArgs
  ): Promise<CheckoutPayment | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Psychotherapist, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Psychotherapist",
    action: "read",
    possession: "any",
  })
  async psychoId(
    @graphql.Parent() parent: CheckoutPayment
  ): Promise<Psychotherapist | null> {
    const result = await this.service.getPsychoId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
