/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateQuestionaireArgs } from "./CreateQuestionaireArgs";
import { UpdateQuestionaireArgs } from "./UpdateQuestionaireArgs";
import { DeleteQuestionaireArgs } from "./DeleteQuestionaireArgs";
import { QuestionaireFindManyArgs } from "./QuestionaireFindManyArgs";
import { QuestionaireFindUniqueArgs } from "./QuestionaireFindUniqueArgs";
import { Questionaire } from "./Questionaire";
import { Patient } from "../../patient/base/Patient";
import { QuestionaireService } from "../questionaire.service";

@graphql.Resolver(() => Questionaire)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class QuestionaireResolverBase {
  constructor(
    protected readonly service: QuestionaireService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Questionaire",
    action: "read",
    possession: "any",
  })
  async _questionairesMeta(
    @graphql.Args() args: QuestionaireFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Questionaire])
  @nestAccessControl.UseRoles({
    resource: "Questionaire",
    action: "read",
    possession: "any",
  })
  async questionaires(
    @graphql.Args() args: QuestionaireFindManyArgs
  ): Promise<Questionaire[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Questionaire, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Questionaire",
    action: "read",
    possession: "own",
  })
  async questionaire(
    @graphql.Args() args: QuestionaireFindUniqueArgs
  ): Promise<Questionaire | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Questionaire)
  @nestAccessControl.UseRoles({
    resource: "Questionaire",
    action: "create",
    possession: "any",
  })
  async createQuestionaire(
    @graphql.Args() args: CreateQuestionaireArgs
  ): Promise<Questionaire> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        patientId: args.data.patientId
          ? {
              connect: args.data.patientId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Questionaire)
  @nestAccessControl.UseRoles({
    resource: "Questionaire",
    action: "update",
    possession: "any",
  })
  async updateQuestionaire(
    @graphql.Args() args: UpdateQuestionaireArgs
  ): Promise<Questionaire | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          patientId: args.data.patientId
            ? {
                connect: args.data.patientId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Questionaire)
  @nestAccessControl.UseRoles({
    resource: "Questionaire",
    action: "delete",
    possession: "any",
  })
  async deleteQuestionaire(
    @graphql.Args() args: DeleteQuestionaireArgs
  ): Promise<Questionaire | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Patient, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "read",
    possession: "any",
  })
  async patientId(
    @graphql.Parent() parent: Questionaire
  ): Promise<Patient | null> {
    const result = await this.service.getPatientId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
