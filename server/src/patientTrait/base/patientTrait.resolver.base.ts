/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePatientTraitArgs } from "./CreatePatientTraitArgs";
import { UpdatePatientTraitArgs } from "./UpdatePatientTraitArgs";
import { DeletePatientTraitArgs } from "./DeletePatientTraitArgs";
import { PatientTraitFindManyArgs } from "./PatientTraitFindManyArgs";
import { PatientTraitFindUniqueArgs } from "./PatientTraitFindUniqueArgs";
import { PatientTrait } from "./PatientTrait";
import { Patient } from "../../patient/base/Patient";
import { PatientTraitService } from "../patientTrait.service";

@graphql.Resolver(() => PatientTrait)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PatientTraitResolverBase {
  constructor(
    protected readonly service: PatientTraitService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PatientTrait",
    action: "read",
    possession: "any",
  })
  async _patientTraitsMeta(
    @graphql.Args() args: PatientTraitFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PatientTrait])
  @nestAccessControl.UseRoles({
    resource: "PatientTrait",
    action: "read",
    possession: "any",
  })
  async patientTraits(
    @graphql.Args() args: PatientTraitFindManyArgs
  ): Promise<PatientTrait[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PatientTrait, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PatientTrait",
    action: "read",
    possession: "own",
  })
  async patientTrait(
    @graphql.Args() args: PatientTraitFindUniqueArgs
  ): Promise<PatientTrait | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PatientTrait)
  @nestAccessControl.UseRoles({
    resource: "PatientTrait",
    action: "create",
    possession: "any",
  })
  async createPatientTrait(
    @graphql.Args() args: CreatePatientTraitArgs
  ): Promise<PatientTrait> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        patientId: args.data.patientId
          ? {
              connect: args.data.patientId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PatientTrait)
  @nestAccessControl.UseRoles({
    resource: "PatientTrait",
    action: "update",
    possession: "any",
  })
  async updatePatientTrait(
    @graphql.Args() args: UpdatePatientTraitArgs
  ): Promise<PatientTrait | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          patientId: args.data.patientId
            ? {
                connect: args.data.patientId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PatientTrait)
  @nestAccessControl.UseRoles({
    resource: "PatientTrait",
    action: "delete",
    possession: "any",
  })
  async deletePatientTrait(
    @graphql.Args() args: DeletePatientTraitArgs
  ): Promise<PatientTrait | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Patient, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Patient",
    action: "read",
    possession: "any",
  })
  async patientId(
    @graphql.Parent() parent: PatientTrait
  ): Promise<Patient | null> {
    const result = await this.service.getPatientId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
